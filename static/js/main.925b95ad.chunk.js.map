{"version":3,"sources":["components/emptyList.js","components/todoList.js","components/taskInfo.js","components/completedTask.js","components/modal.js","components/todo.js","App.js","serviceWorker.js","index.js"],"names":["EmptyList","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","msg","Component","TodoList","_this","handleCheck","e","console","log","JSON","parse","target","value","addToCompletedTasks","state","todoList","_this2","list","map","obj","index","key","type","stringify","category","onChange","CompletedTask","addToActiveTasks","Modal","handleChange","setState","defineProperty","name","taskObj","addTask","closeModal","document","getElementById","style","display","id","className","onClick","Todo","openModal","generateUniqueID","Math","round","random","addNewTask","uniqueID","add","push","removeFromCompletedList","completedList","removeFromTodoList","deletedIndex","length","splice","Set","modal_Modal","emptyList_EmptyList","todoList_TodoList","completedTask_CompletedTask","App","todo_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.925b95ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class EmptyList extends Component {\n  constructor(props){\n    super(props)\n  }\n  render() {\n    return (\n      <p>{this.props.msg}</p>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TaskInfo from './taskInfo.js'\n\nexport default class TodoList extends Component {\n  constructor(props){\n    super(props)\n  \tthis.state = {}\n  }\n\n  handleCheck = (e) => {\n  \tconsole.log('e',JSON.parse(e.target.value))\n  \tthis.props.addToCompletedTasks(JSON.parse(e.target.value))\n  }\n\n  render() {\n  \tlet todoList = []\n  \ttodoList = this.props.list.map((obj,index)=>{\n  \t\treturn <li key={index}>\n  \t\t\t\t<input type=\"checkbox\" value={JSON.stringify(obj)}/><label>{obj.category}</label>\n  \t\t\t</li>\n  \t})\n\n    return (\n      <div>\n      \t<h4>Your Active Tasks</h4>\n      \t<div onChange={(e)=>this.handleCheck(e)}>\n      \t\t{todoList}\n      \t\t\n      \t</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class TaskInfo extends Component {\n  constructor(props){\n    super(props)\n  \tthis.state = {\n  \t\topenInfo : false\n  \t}\n  }\n\n\n  render() {\n \n    return (\n    \t<div> \n    \t\t{(this.props.infoObj.task != '' || this.props.infoObj.place != '') ? <p>{this.props.infoObj.task} <span >{this.props.infoObj.place}</span></p> : <p>No Further Info for this Category</p>}\n    \t</div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport TaskInfo from './taskInfo.js'\n\nexport default class CompletedTask extends Component {\n  constructor(props){\n    super(props)\n  \tthis.state = {}\n  }\n\n   handleCheck = (e) => {\n    console.log('e',JSON.parse(e.target.value))\n    this.props.addToActiveTasks(JSON.parse(e.target.value))\n  }\n\n  render() {\n  \tlet todoList = []\n  \ttodoList = this.props.list.map((obj,index)=>{\n  \t\treturn <li value={obj} key={index}>\n          <input type=\"checkbox\" value={JSON.stringify(obj)}/><label>{obj.category}</label>\n        </li>\n  \t})\n\n    return (\n      <div>\n      \t<h4>Completed Tasks</h4>\n      \t<div onChange={(e)=>this.handleCheck(e)}>\n      \t\t{todoList}\n      \t\t\n      \t</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Modal extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n    \ttaskObj: {}\n    }\n  }\n  \n  componentDidMount(){\n  \tlet modal = document.getElementById('myModal');\n  \tmodal.style.display = 'block'\n  }\n\n  handleChange = (e) => {\n  \tthis.setState({[e.target.name]: e.target.value})\n  \tlet taskObj = this.state.taskObj\n  \ttaskObj[e.target.name] = e.target.value\n  \tthis.setState({taskObj})\n  }\n\n  addTask = () => {\n  \tthis.props.closeModal()\n  \tthis.props.addTask(this.state.taskObj)\n  }\n\n  render() {\n    return (\n      <div id=\"myModal\" className=\"modal\"> \n      \t<div className=\"modal-content\" onChange={(e)=>this.handleChange(e)}>\n      \t\t<li>\n\t      \t\t<label>Categaory</label>\n\t      \t\t<input name=\"category\" type=\"text\" />\n      \t\t</li>\n      \t\t<li>\n\t      \t\t<label>Task</label>\n\t      \t\t<input name=\"task\" type=\"text\" />\n      \t\t</li>\n      \t\t<li>\n\t      \t\t<label>Place</label>\n\t      \t\t<input name=\"place\" type=\"text\" />\n      \t\t</li>\n      \t\t<button onClick={this.addTask}>Add</button>\n      \t\t<button onClick={this.props.closeModal}>Close</button>\n      \t</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport EmptyList from './emptyList.js';\nimport TodoList from './todoList.js'\nimport CompletedTask from './completedTask.js'\nimport Modal from './modal.js'\n\nexport default class Todo extends Component {\n  constructor(props){\n    super(props)\n    this.state = { openModal : false, todoList:[], completedList: [] }\n    this.todoList = []\n    this.completedList = [] \n    this.uniqueID = new Set()\n  }\n\n  openModal = () => {\n    this.setState({openModal: true})\n  }\n\n  closeModal = () => {\n    this.setState({openModal: false})\n  }\n\n  generateUniqueID = () => {\n    return Math.round(Math.random()*99)\n  }\n\n  addNewTask = (obj) => {\n    let uniqueID = this.generateUniqueID()\n    obj.id = uniqueID\n    this.uniqueID.add(uniqueID)\n    this.addToActiveTasks(obj) \n  }\n\n  addToActiveTasks = (obj) => {\n    this.todoList.push(obj)\n    this.setState({todoList: this.todoList})\n    this.removeFromCompletedList(obj.id)\n  }\n\n  addToCompletedTasks = (obj) => {\n    this.completedList.push(obj)\n    this.removeFromTodoList(obj.id)\n    this.setState({completedList: this.completedList})\n  }\n\n  removeFromCompletedList = (id) => {\n    let deletedIndex\n    \n    if(this.completedList.length){\n      this.completedList.map((obj,index)=>{\n        if(id === obj.id){\n          deletedIndex = index\n        }\n      })\n      this.completedList = this.completedList.splice(1,deletedIndex)\n      this.setState({completedList: this.completedList})\n    }\n  }\n\n  removeFromTodoList = (id) => {\n    let deletedIndex\n    \n    if(this.todoList.length){\n      this.todoList.map((obj,index)=>{\n        if(id === obj.id){\n          deletedIndex = index\n        }\n      })\n      this.todoList = this.todoList.splice(1,deletedIndex)\n      this.setState({todoList: this.todoList})\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <h3>Todo Application</h3>\n        <button className=\"addTaskButton\" onClick={()=>this.openModal()}>Add Task</button>\n        {this.state.openModal ? <Modal closeModal={this.closeModal} addTask={this.addNewTask}/> : null}\n        {this.todoList.length === 0 && this.completedList.length === 0 ? <EmptyList msg=\"No Task Added\" /> : <TodoList addToCompletedTasks={this.addToCompletedTasks} list={this.state.todoList}/>}\n        {this.todoList.length !== 0 || this.completedList.length !== 0 ? <CompletedTask list={this.state.completedList} addToActiveTasks={this.addToActiveTasks} /> : null}\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './components/todo.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Todo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}